
v2.2.0
------

New: .setMaxRecursion() -- the ultimate synchronous recursion prevention (recursion are counted globally for ALL async plan execution)


v2.1.6
------

Dependencies


v2.1.5
------

Dependencies


v2.1.4
------

Dependencies


v2.1.3
------

fixing async.while().do() issue with the root execContext


v2.1.2
------

Dependencies


v2.1.1
------

Adding safeTimeout to the browser lib


v2.1.0
------

async.setSafeTimeout() and async.clearSafeTimeout()


v2.0.1
------

Documentation fixed


v2.0.0
------

Browser lib: OK! All tests passed!


v2
--

Breaking change:

* async.EventEmitter was removed: the lib now use the [NextGen Event](https://www.npmjs.com/package/nextgen-events)
  module as its event emitter.
  If your code was using async.EventEmitter, please consider switching to NextGen Event.
  It has everything async.EventEmitter had, and more.


v1.0.1
------

Browser support is better (still not finished yet)


v0.6.10
-------

Browser lib


v0.6.9
------

"use strict" everywhere


v0.6.8
------

Documentation error fixed


v0.6.7
------

Dependencies



v0.6.2 - v0.6.5
---------------

Introducing async.exit(): exit node.js async-friendly!


v0.6.1
------

Documentation of the 0.6.0 breaking changes.


v0.6.0
------

Breaking change: 'nice' value now works differently:
* the process.nextTick() variation doesn't exist anymore
* starting at nice=-2, the async.EventEmitter will emit synchronously for 10 recursions, the 11th recursion will emit
	using setImmediate()
* nice=-3 will emit synchronously for 20 recursions...
* nice=-4 will emit synchronously for 30 recursions...
* and so on...


v0.5.10
-------

Fixed an error in the documentation (async.foreach()).


v0.5.9
------

New: async.wrapper.timeout(), a wrapper for asynchronous function. Not documented yet.


v0.5.8
------

New: jobContext.abortLoop(), since jobContext.abort() can be looped anyway.


v0.5.7
------

Now jobCallback contains .jobContext which is equals to *this*.


v0.5.6
------

Upgraded dependencies.


v0.5.5
------

New shorthand: async.callTimeout(). API still not freezed, no documentation right now.


v0.5.4
------

Upgraded dependencies (tree-kit).


v0.5.2
------

Tests and documentation about ExecContext.getJobsStatus().


v0.5.1
------

Compatibility-breaking changes:
	* 'progress' event: the object properties' name have changed:
		- 'done' has been replaced by 'resolved' (less ambiguous, since abort, timeout & failure was counted in)
		- 'running' has been replaced by 'pending' (less ambiguous, since the job may have stopped working someway)
		- 'queued' has been replaced by 'waiting' (more appropriated)
New features:
	* 'progress' event properties: resolved, ok, failed, pending, waiting
	* ExecContext.getJobsStatus(): give insightful real-time information about the status of each jobs,
		for flow-control debugging purpose
